/*
Given a BST and an integer. Find the least absolute difference between any node value of the BST and the given integer.

Input:
2
10 2 11 1 5 N N N N 3 6 N 4
13
8 1 9 N 4 N 10 3
9

Output:
2
0

*/



void minDiffUtil(struct Node *ptr, int k, int &min_diff,
                                      int &min_diff_key)
{
    if (ptr == NULL)
        return ;

    // If k itself is present
    if (ptr->data == k)
    {
        min_diff_key = k;
        return;
    }

    // update min_diff and min_diff_key by checking
    // current Node value
    if (min_diff > abs(ptr->data - k))
    {
        min_diff = abs(ptr->data - k);
        min_diff_key = ptr->data;
    }

    // if k is less than ptr->key then move in
    // left subtree else in right subtree
    if (k < ptr->data)
        minDiffUtil(ptr->left, k, min_diff, min_diff_key);
    else
        minDiffUtil(ptr->right, k, min_diff, min_diff_key);
}
int minDiff(Node *root, int k)
{
    // Initialize minimum difference
    int min_diff = INT_MAX,min_diff_key = -1;
 
    // Find value of min_diff_key (Closest key
    // in tree with k)
    minDiffUtil(root, k, min_diff, min_diff_key);

    return abs(min_diff_key-k);
}
